// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');


// - use the contents from proof.json generated from zokrates steps
// const proof = require('../zokrates/square/code/proof');

const proof = require('../../zokrates/code/square/proof')

		// "A":["0x2f8db13a3b633c7dfa376d20369de2b731817d5fa136c7f4f6bcb697121b4312", "0x8f4967ed522ef84efad241d2b390246f4fbb17bf9fbd3b25aa24d8dcc8e058b"],
    // "B":
    // [["0x2ea9ab9efdd533b180836289eff1c34511f2f4bebddb31ad3bd0ddfcbeb4f565", "0x18557414827cfbe540a73da17250a659d7867a9330d19e1ea508315b5daa67c9"], ["0x1ff6047491b30214ba04c17d3e0c73f8df5e6edfa9bcf291420ee8436450841f", "0x10138fdbda27dc44e70ab41ece39dccf8674ccea53166689d92bfbe01587d9d8"]],
    // "C":["0x1d47fdbb9a03b43eac49e4a3449eb9128b8284330c0e20cacd97c984eace79ba", "0xb8bd8b40806fc50cac1d043fa8c05d5f3f50162a238e8f7d6b4b8f78e0ac3bf"],
//	"input":[9,1]}


contract('Test Verifier', accounts =>{
  const account_one = accounts[0]

  beforeEach(async function () {
    //initialise new mintable contract with first account address as owner
    this.contract = await verifier.new({from: account_one});
})

// Test verification with correct proof
  it('test verification with correct proof', async function(){
    console.log('proof.proof.a: ' + proof.proof.a);
    console.log('proof.proof.b: ' + proof.proof.b);
    console.log('proof.proof.c: ' + proof.proof.c);
    console.log('proof.input: ' + proof.inputs);

    let isVerified = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs, {from: account_one});
    assert.equal(isVerified, true, 'verification must be valid');
  })

// Test verification with incorrect proof


  it('test verification with incorrect proof', async function(){

    const incorrect_inputs =["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000000"]
    let isVerified = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, incorrect_inputs, {from: account_one});
    assert.equal(isVerified, false, 'verification must be valid');
})


})



